# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_view.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from SP_custom_ui import FlatHead, custom_listwidget
import traceback


class Ui_SSongPluto(QtWidgets.QMainWindow):
    def __init__(self, _parent=None):
        super(Ui_SSongPluto, self).__init__(_parent)
        # self.style_component = {'background_color': '#333333',
        #                         'border_color': '#595959',
        #                         'font_color':'#D9D9D9',
        #                         'font_color_pressed': '#595959',
        #                         'button_color': 'rgba(70,70,70,0.5)'}


        self.style_component = {'background_color': 'rgb(91,90,90)',
                                'border_color': '#595959',
                                'font_color':'#D9D9D9',
                                'font_color_pressed': '#595959',
                                'button_color': 'rgba(70,70,70,0.5)'}

        self.btn_list = []
        self.main_text_font = QtGui.QFont()
        self.main_text_font.setFamily(u"Segoe UI")
        self.main_text_font.setPointSize(7)



    def setupUi(self):
        self.setObjectName("SSongPluto")
        self.resize(800, 550)
        self.setMinimumSize(QtCore.QSize(800, 550))
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet(u"background:"+self.style_component['background_color']+";")

        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)


        self.SP_main_vl = QtWidgets.QVBoxLayout()
        self.SP_main_vl.setObjectName("SP_main_vl")


        try:
            self.frame_top = FlatHead(self.centralwidget)
            self.frame_top.init_head()
        except:
            traceback.print_exc()



        self.SP_main_vl.addWidget(self.frame_top)













        self.SP_root_dir_hl = QtWidgets.QHBoxLayout()
        self.SP_root_dir_hl.setObjectName("SP_root_dir_hl")
        self.SP_root_dir_btn = QtWidgets.QPushButton(self.centralwidget)
        self.SP_root_dir_btn.setObjectName("SP_root_dir_btn")
        self.SP_root_dir_btn.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.SP_root_dir_hl.addWidget(self.SP_root_dir_btn)
        self.btn_list.append(self.SP_root_dir_btn)

        self.SP_root_dir_lb = QtWidgets.QLabel(self.centralwidget)
        self.SP_root_dir_lb.setObjectName("SP_root_dir_lb")
        self.change_file_label_color('red')
        self.SP_root_dir_hl.addWidget(self.SP_root_dir_lb)


        self.SP_root_dir_hl.setStretch(0, 1)
        self.SP_root_dir_hl.setStretch(1, 10)
        self.SP_main_vl.addLayout(self.SP_root_dir_hl)
        self.SP_info_hl = QtWidgets.QHBoxLayout()
        self.SP_info_hl.setObjectName("SP_info_hl")


        self.SP_info_prj_lw = custom_listwidget(self.centralwidget)
        self.SP_info_prj_lw.setObjectName("SP_info_prj_lw")
        self.SP_info_hl.addWidget(self.SP_info_prj_lw)



        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.SP_info_hl.addWidget(self.line)


        self.SP_info_desc_te = QtWidgets.QTextEdit(self.centralwidget)
        self.SP_info_desc_te.setObjectName("SP_info_desc_te")
        self.SP_info_desc_te.setFont(self.main_text_font)
        self.SP_info_desc_te.setReadOnly(True)
        # self.SP_info_desc_te.setStyleSheet(u"color:rgb(255,255,255);")
        self.SP_info_hl.addWidget(self.SP_info_desc_te)


        self.SP_info_hl.setStretch(0, 3)
        self.SP_info_hl.setStretch(1, 1)
        self.SP_info_hl.setStretch(2, 2)
        self.SP_main_vl.addLayout(self.SP_info_hl)
        self.SP_btn_list_hl = QtWidgets.QHBoxLayout()
        self.SP_btn_list_hl.setObjectName("SP_btn_list_hl")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.SP_btn_list_hl.addItem(spacerItem)


        self.SP_create_prj_btn = QtWidgets.QPushButton(self.centralwidget)
        self.SP_create_prj_btn.setObjectName("SP_create_prj_btn")
        self.SP_create_prj_btn.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.SP_btn_list_hl.addWidget(self.SP_create_prj_btn)
        self.btn_list.append(self.SP_create_prj_btn)

        self.SP_open_btn = QtWidgets.QPushButton(self.centralwidget)
        self.SP_open_btn.setObjectName("SP_open_btn")
        self.SP_open_btn.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.SP_btn_list_hl.addWidget(self.SP_open_btn)
        self.btn_list.append(self.SP_open_btn)

        self.SP_btn_list_hl.setStretch(0, 6)
        self.SP_btn_list_hl.setStretch(1, 1)
        self.SP_btn_list_hl.setStretch(2, 1)
        self.SP_main_vl.addLayout(self.SP_btn_list_hl)
        self.SP_main_vl.setStretch(0, 1)
        self.SP_main_vl.setStretch(1, 1)
        self.SP_main_vl.setStretch(2, 10)
        self.SP_main_vl.setStretch(3, 1)
        self.verticalLayout_2.addLayout(self.SP_main_vl)
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi()
        self.set_widget_styleSheet()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("SSongPluto", "SSongPluto"))
        self.SP_root_dir_btn.setText(_translate("SSongPluto", "경로 지정"))
        self.SP_root_dir_lb.setText(_translate("SSongPluto", ""))
        self.SP_create_prj_btn.setText(_translate("SSongPluto", "프로젝트 생성"))
        self.SP_open_btn.setText(_translate("SSongPluto", "프로젝트 열기"))


    def change_file_label_color(self, target_color):
        '''change file_label widget color in ui_scene_manager.py
        string type input : green , yellow, red, default '''
        green="114, 255, 145"
        yellow= "252, 196, 75"
        red=" 251, 79, 73"
        transparent="0.1"
        opacity="0.9"
        if target_color == "green":
            self.SP_root_dir_lb.setStyleSheet("QLabel{"+\
                                        "border-style: solid;"+\
                                        "border-width : 0.5px;"+\
                                        "border-color: rgba("+green+","+ opacity+");"+\
                                        "border-radius: 2px;"+\
                                        "color :"+ self.style_component['font_color'] +";"+\
                                        "background:rgba("+green+","+ transparent+");"+\
                                        "font: bold 11px;"+\
                                        "padding-left: 3px;"+\
                                        "}")
        elif target_color == "yellow":
            self.SP_root_dir_lb.setStyleSheet("QLabel{"+\
                                        "border-style: solid;"+\
                                        "border-width : 0.5px;"+\
                                        "border-color: rgba("+yellow+","+ opacity+");"+\
                                        "border-radius: 2px;"+\
                                        "color :"+ self.style_component['font_color'] +";"+\
                                        "background:rgba("+yellow+","+ transparent+");"+\
                                        "font: bold 11px;"+\
                                        "padding-left: 3px;"+\
                                        "}")
        elif target_color == "red":
            self.SP_root_dir_lb.setStyleSheet("QLabel{"+\
                                        "border-style: solid;"+\
                                        "border-width : 0.5px;"+\
                                        "border-color:rgba("+red+","+ opacity+");"+\
                                        "border-radius: 2px;"+\
                                        "color :"+ self.style_component['font_color'] +";"+\
                                        "background:rgba("+red+","+ transparent+");"+\
                                        "font: bold 11px;"+\
                                        "padding-left: 3px;"+\
                                        "}")
        elif target_color == "default":
            self.SP_root_dir_lb.setStyleSheet("QLabel{"+\
                                        "border-style: solid;"+\
                                        "border-width : 0.5px;"+\
                                        "border-color: "+ self.style_component['border_color'] +";"+\
                                        "border-radius: 2px;"+\
                                        "color :"+ self.style_component['font_color'] +";"+\
                                        "background:"+self.style_component['background_color']+";"+\
                                        "font: bold 11px;"+\
                                        "padding-left: 3px;"+\
                                        "}")



    def get_selectedpath(self):
        _file = str(QtWidgets.QFileDialog.getExistingDirectory(self, "Select Directory"))
        return _file

    def set_root_lb(self, _path):
        self.SP_root_dir_lb.setText(_path)

    def set_prj_lw(self, _prj_hub_list):
        self.SP_info_prj_lw.set_items(_prj_hub_list)


    def set_description(self, _prj_obj):
        _msg ='Project Name\t' + '{0}\n'.format(_prj_obj.name) +\
                'Directory\t' + '{0}\n'.format(_prj_obj.path) +\
                'Is Git\t' + '{0}\n'.format(str(_prj_obj.is_git)) +\
                'Updated Date\t' + '{0}'.format( _prj_obj.latest_date)
        self.SP_info_desc_te.setText(_msg)


    def set_widget_styleSheet(self):
        for _btn in self.btn_list:
            _btn.setStyleSheet(u"QPushButton {\n"
    "	border: 2px solid rgb(51,51,51);\n"
    "	border-radius: 5px;	\n"
    "	color:rgb(255,255,255);\n"
    "	background-color: rgb(51,51,51);\n"
    "}\n"
    "QPushButton:hover {\n"
    "	border: 2px solid rgb(0,143,150);\n"
    "	background-color: rgb(0,143,150);\n"
    "}\n"
    "QPushButton:pressed {	\n"
    "	border: 2px solid rgb(0,143,150);\n"
    "	background-color: rgb(51,51,51);\n"
    "}\n"
    "\n"
    "QPushButton:disabled {	\n"
    "	border-radius: 5px;	\n"
    "	border: 2px solid rgb(112,112,112);\n"
    "	background-color: rgb(112,112,112);\n"
    "}")


    def refresh_all(self):
        self.SP_info_prj_lw.reset_listwidget()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SSongPluto = QtWidgets.QMainWindow()
    ui = Ui_SSongPluto()
    ui.setupUi(SSongPluto)
    SSongPluto.show()
    sys.exit(app.exec_())
